# This workflow is the main workflow for regenerating the data needed for Bowtie's UI.
# It retests all of Bowtie's supported implementations, publishing the reports (and other auxiliary metadata) for use in the frontend.
name: Collect New Test Results

on:
  release:
    types: [published]
  workflow_call:
  workflow_dispatch:
  schedule:
    # Every 6 hours, at 15 past the hour
    - cron: "15 */6 * * *"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  previous-reports:
    runs-on: ubuntu-latest
    steps:
      - name: Download the previous reports
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: report.yml
          name: report-.*
          name_is_regexp: true
          path: previous
          if_no_artifact_found: warn

      - name: Store previous reports for inclusion
        uses: actions/upload-artifact@v4
        with:
          name: previous-reports
          path: previous

  dialects:
    runs-on: ubuntu-latest
    outputs:
      dialects: ${{ steps.dialects-matrix.outputs.dialects }}
    steps:
      - uses: actions/checkout@v4
      - name: Collect supported dialects
        id: dialects-matrix
        run: |
          printf 'dialects=%s\n' "$(jq -c '[.[].shortName]' data/dialects.json)" >> $GITHUB_OUTPUT

  regenerate-reports:
    needs: dialects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.dialects.outputs.dialects) }}

    steps:
      # FIXME: we can skip checking out if we are able to list all images in
      #        the image repository
      - uses: actions/checkout@v4

      - name: Install Bowtie
        uses: ./

      - name: Generate a New Report
        run: |
          bowtie suite $(ls implementations/ | sed 's/^/-i /') https://github.com/json-schema-org/JSON-Schema-Test-Suite/tree/main/tests/${{ matrix.version }} >${{ matrix.version }}.json

      # This is useful to debug whether Bowtie accidentally fetched some huge
      # number of container images.
      - name: Show what images we fetched
        run: docker images
        if: always()

      # This unfortunately can go wrong if e.g. we ever run out of memory above.
      # Probably we should also atomically move files into place.
      - name: Check Report is Valid
        run: |
          bowtie summary --show failures ${{ matrix.version }}.json --format markdown >> $GITHUB_STEP_SUMMARY

      - uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.version }}
          path: ${{ matrix.version }}.json

  generate-implementation-metadata:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Bowtie
        uses: ./

      - name: Generate implementations.json file
        run: |
          bowtie info $(ls implementations/ | sed 's/^/-i /') --format json > implementations.json

      - uses: actions/upload-artifact@v4
        with:
          name: implementations
          path: implementations.json

  site:
    needs:
      - regenerate-reports
      - previous-reports
      - generate-implementation-metadata

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Bowtie
        uses: ./

      - name: Create our Site Structure
        run: mkdir site

      - name: Include Previous Report
        uses: actions/download-artifact@v4
        with:
          name: previous-reports
          path: site/previous/

      - name: Include New Reports
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          path: site/
          merge-multiple: true

      - name: Include Implementation Metadata
        uses: actions/download-artifact@v4
        with:
          name: implementations
          path: site/

      - name: Generate Badges
        run: bowtie badges

      - uses: actions/upload-artifact@v4
        with:
          name: site
          path: site

  deploy-frontend:
    needs: site
    uses: ./.github/workflows/deploy-frontend.yml
    with:
      report_artifact_in_scope: true
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

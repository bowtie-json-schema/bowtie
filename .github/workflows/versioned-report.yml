# This workflow is a separate workflow from `report.yml` for regenerating the versioned report data needed for Bowtie's UI.
# It retests all of Bowtie's supported implementations for all their multiple versions listed in `matrix-versions.json` file if one exists for them.
name: Collect New Versioned Test Results

on:
  workflow_dispatch:

jobs:
  list-implementations:
    runs-on: ubuntu-latest
    outputs:
      implementations: ${{ steps.implementations-matrix.outputs.implementations }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Bowtie
        uses: ./

      - name: List all Bowtie supported implementations having a "matrix-versions.json" file
        id: implementations-matrix
        run: |
          IMPLEMENTATIONS=$(bowtie filter-implementations --format json | jq -r '.[]')
          MATRIX="[]"
          for impl in $(echo "$IMPLEMENTATIONS"); do
            if [ -f "implementations/$impl/matrix-versions.json" ]; then
              MATRIX=$(echo $MATRIX | jq --arg impl "$impl" '. + [$impl]')
            fi
          done
          echo "implementations=$(echo $MATRIX | jq -c .)" >> $GITHUB_OUTPUT

  regenerate-versioned-reports:
    needs: list-implementations
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        implementation: ${{ fromJson(needs.list-implementations.outputs.implementations) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Bowtie
        uses: ./

      - name: Generate a New Versioned Report
        id: generate-new-versioned-report
        run: |
          impl=${{ matrix.implementation }}
          SUPPORTED_DIALECT_URIS=$(bowtie info -i $impl --format json | jq -r '.dialects[]')
          MATRIX_VERSIONS_FILE="implementations/$impl/matrix-versions.json"
          for dialect_uri in $(echo $SUPPORTED_DIALECT_URIS); do
            dialect_shortname=$(jq -r --arg uri "$dialect_uri" '.[] | select(.uri == $uri) | .shortName' data/dialects.json)
            bowtie suite $(jq -r '.[]' "$MATRIX_VERSIONS_FILE" | sed "s/^/-i image:$impl:/") https://github.com/json-schema-org/JSON-Schema-Test-Suite/tree/main/tests/$dialect_shortname > $dialect_shortname.json
          done

      # This is useful to debug whether Bowtie accidentally fetched some huge
      # number of container images.
      - name: Show what images we fetched
        run: docker images
        if: always()

      # This unfortunately can go wrong if e.g. we ever run out of memory above.
      # Probably we should also atomically move files into place.
      - name: Check Reports are Valid
        run: |
          DIALECT_URIS=$(bowtie filter-dialects)
          for dialect_uri in $(echo $DIALECT_URIS); do
            dialect_shortname=$(jq -r --arg uri "$dialect_uri" '.[] | select(.uri == $uri) | .shortName' data/dialects.json)
            if [ -f "$dialect_shortname.json" ]; then
              bowtie summary --show failures "$dialect_shortname.json" --format markdown >> $GITHUB_STEP_SUMMARY
            fi
          done

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.implementation }}
          path: |
            *.json
            !.prettierrc.json
